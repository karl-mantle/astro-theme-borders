---
import type { HTMLAttributes } from 'astro/types';
import type { DefaultTypes } from '~/types';
import { Picture } from 'astro:assets';
import { resolveBackgroundColor, resolveTextColor, resolveLinkColor } from '~/utils';
import Button from '~/components/ui/Button.astro';
import Date from '~/components/ui/Date.astro';
import Heading from '~/components/ui/Heading.astro';

interface Props extends DefaultTypes, HTMLAttributes<'li'> {
  date: Date,
  href: string
};

const { backgroundColor, date, dateOptions = { description: 'Blog published on', hideDescription: true }, description, heading, headingOptions = { headingTag: 'h3' }, href, image, imageOptions = { altText: '' }, class: className, ...rest }: Partial<Props> = Astro.props;

const uniqueId = Math.random().toString(36).slice(2, 11);
---

<li
  aria-label={heading}
  class:list={['group/card h-full flex flex-col-reverse hover:shadow-lg transition duration-300', className]}
  :class="{'cursor-pointer': !preventClick}"
  tabindex="-1"
  x-data="{ clickTimeout: null, preventClick: false }"
  @keydown.enter="window.location = $refs.link.href"
  @mouseleave="clearTimeout(clickTimeout); preventClick = false"
  @mousedown="event.preventClick = false; event.button === 2 ? preventClick = true : clickTimeout = setTimeout(() => preventClick = true, 200);"
  @mouseup=" clearTimeout(clickTimeout); if (!preventClick) { window.location = $refs.link.href; } preventClick = false;"
  {...rest}
>

  <article class:list={['flex flex-col flex-grow gap-2 p-4 mb-auto', resolveBackgroundColor(backgroundColor)]}>

    <Heading
      backgroundColor={backgroundColor}
      id={uniqueId}
      class:list={['md:text-xl underline underline-offset-8 decoration-transparent transition duration-300', resolveLinkColor(backgroundColor)]}
      {...headingOptions}
    >
      {heading}
    </Heading>

    <Date
      backgroundColor={backgroundColor}
      date={date}
      description={dateOptions.description}
      hideDescription={dateOptions.hideDescription}
    />

    <p class={resolveTextColor(backgroundColor)}>{description}</p>

    <Button
      aria-describedby={uniqueId}
      backgroundColor={backgroundColor}
      buttonStyle="link"
      buttonText="Read more"
      class="mt-auto mr-auto ml-0 pl-0 focus:pl-2"
      href={href} 
      icon="tabler:arrow-right"
      iconAnimate={true}
      iconSize={21}
      x-ref="link"
    />

  </article>

  { image && (
    <Picture
      alt={imageOptions.altText!}
      class="object-cover aspect-video"
      formats={['webp']}
      inferSize={true}
      sizes={`480px`}
      src={image}
      widths={[480]}
    />
  )}

</li>
