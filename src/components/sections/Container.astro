---
import type { HTMLAttributes } from 'astro/types';
import type { DefaultTypes } from '~/types';
import { THEME_CONTAINER_DESKTOP, THEME_CONTAINER_MOBILE } from '~/consts';
import { resolveBackgroundColor } from '~/utils';
import SectionHeader from '~/components/partials/SectionHeader.astro';

interface Props extends DefaultTypes, HTMLAttributes<'section'> {
  hideHeader?: boolean,
  type: 'standard' | 'unordered' | 'ordered',
};

const { backgroundColor = 'transparent', buttonPrimary, buttonSecondary, description, heading, headingOptions, hideHeader, layoutOptions = { fullWidth: false }, type, class: className, ...rest }: Partial<Props> = Astro.props;

let columnsCSS;
switch (layoutOptions?.columns) {
  case 1:
    columnsCSS = 'grid-cols-1';
    break;
  case 2:
    columnsCSS = 'grid-cols-1 md:grid-cols-2';
    break;
  case 3:
    columnsCSS = 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 md:[&>:last-child]:justify-self-center md:[&>:last-child]:col-span-2 md:[&>:last-child]:w-[50%] lg:[&>:last-child]:col-span-1 lg:[&>:last-child]:w-full';
    break;
  default:
    columnsCSS = 'grid-cols-1';
    break;
};

let ColumnsTag;
switch (type) {
  case 'unordered':
    ColumnsTag = 'ul';
    break;
  case 'ordered':
    ColumnsTag = 'ol';
    break;
  default:
    ColumnsTag = 'div';
    break;
};
---

<section class:list={['flex flex-col gap-8', resolveBackgroundColor(backgroundColor), className]} {...rest} >

  { !layoutOptions?.hideHeader && (
    <SectionHeader
      backgroundColor={backgroundColor}
      buttonPrimary={buttonPrimary}
      buttonSecondary={buttonSecondary}
      class:list={[THEME_CONTAINER_MOBILE, THEME_CONTAINER_DESKTOP]}
      description={description}
      heading={heading}
      headingOptions={headingOptions}
    />
  )}

  <ColumnsTag class:list={['grid gap-4 lg:gap-8', columnsCSS, layoutOptions?.fullWidth ? '' : `${THEME_CONTAINER_MOBILE} ${THEME_CONTAINER_DESKTOP}`]}>
    <slot />
  </ColumnsTag>

</section>
