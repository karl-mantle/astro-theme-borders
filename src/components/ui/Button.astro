---
import type { ButtonProps } from '~/types';
import { Icon } from 'astro-icon/components';

const { backgroundColor = 'transparent', buttonStyle, text, textClass, href, icon, iconSize = 21, iconRotate, iconReverse, ariaLabel, class: className, ...rest }: Partial<ButtonProps> = Astro.props;

let darkButton;
if (backgroundColor === 'black' || backgroundColor === 'dark-grey' || backgroundColor === 'transparent-dark') {
  darkButton = true;
}

let buttonCSS;
switch (buttonStyle) {
  case 'primary':
    switch (darkButton) {
      case true:
        buttonCSS = 'py-2 px-4 border-2 border-white dark:border-black bg-white dark:bg-black hover:bg-transparent dark:hover:bg-transparent text-black dark:text-white hover:text-true-white dark:hover:text-true-black';
        break;
      default:
        buttonCSS = 'py-2 px-4 border-2 border-black dark:border-white bg-black hover:bg-transparent dark:bg-white dark:hover:bg-transparent text-white dark:text-black hover:text-true-black dark:hover:text-true-white';
        break;
    }
    break;
  case 'secondary':
    switch (darkButton) {
      case true:
        buttonCSS = 'py-2 px-4 border-2 border-white dark:border-black bg-transparent hover:bg-white dark:bg-transparent dark:hover:bg-black text-white dark:text-black hover:text-true-black dark:hover:text-true-white';
        break;
      default:
        buttonCSS = 'py-2 px-4 border-2 border-black dark:border-white bg-transparent hover:bg-black dark:bg-transparent dark:hover:bg-white text-black dark:text-white hover:text-true-white dark:hover:text-true-black';
        break;
    }
    break;
  case 'link':
    switch (darkButton) {
      case true:
        buttonCSS = 'w-fit mx-auto lg:mx-0 p-2 text-white hover:text-true-white dark:text-black dark:hover:text-true-black border-transparent border-b-2 hover:border-true-white dark:hover:border-true-black';
        break;
      default:
        buttonCSS = 'w-fit mx-auto lg:mx-0 p-2 text-black hover:text-true-black dark:text-white dark:hover:text-true-white border-transparent border-b-2 hover:border-true-black dark:hover:border-true-white';
        break;
    }
    break;
  case 'disabled':
    switch (darkButton) {
      case true:
        buttonCSS = 'p-2 text-light-grey dark:text-dark-grey border-transparent border-b-2 cursor-not-allowed';
        break;
      default:
        buttonCSS = 'text-dark-grey p-2 dark:text-light-grey border-transparent border-b-2 cursor-not-allowed';
        break;
    }
    break;
  default:
    break;
}
---

<a href={href} class:list={['group/btn flex gap-2 justify-center items-center transition ease-in-out duration-300', buttonCSS, iconReverse ? 'flex-row-reverse' : '', className]} aria-label={ariaLabel} {...rest} >
  <span class:list={['font-medium', textClass ? textClass : '']}>
    {text}
  </span>
  { icon && (
    <Icon
      name={icon}
      height={iconSize}
      width={iconSize}
      class:list={['self-center', iconRotate ? 'group-hover/btn:-rotate-45 transition duration-300' : '']}
    />
  )}
</a>
